 # Feedback

	Rhys Thomas

## Game.cs 

Good Aspects:
Encapsulation and Structure:
  The game class demonstrated is well-organized and displayed in a way that is easy to interpret, keeping the game stable and running well.
  As mentioned, the layout of the code is well organzed and therefore displays different parts effectively. 
OOP Approach:
Classes implemented very well as taught within our OOP module. The classes are implemented so that they can be developed further within the second assignment.
Great error handling methods

Improvements:
Remember to ensure any unfinished methods are clearly marked to avoid any confustion with people reading the code. Such as the save system.

## GameUI.cs

Good Aspects:
Very well structured code within the UI file. 
More good use of organisation too, keeping the UI separtate from the actual mechanics of the game. 
It will be easy to add more enemies and rooms to the code structure.

Improvements:

GameUI is overall extremely strong, additional quality of life things could be added though such as perhaps a prompt to warn players of progress loss if they quit etc...

## Player.cs

Good Aspects:
 Very well encapsulated data for the players stats.
  Well handled features like the max health of the player not exceeding the desired value and the inventor system being made so it is unmodifiable outside the given class.

Improvements:
Originally duplications were a risk when picking up items but has function has since been ammended.
Currently perfect.

## Room.cs

Good Aspects:
Used advanced constructor logic to generate random loot for rooms which makes the game infinitely playable.
Lootroom() function is very interesting and uniqiue way to have the feature of looting implemented within the class.

Improvements:

Potentially quality of life within the UI but generally no improvements needed at all.

# Checklist:

## Pass standard:
	
1. [/] The code compiles and runs.
2. [/] The player can explore at least one room.
3. [/] Object instantiation, method calls evident.
4. [/] There is code review from two students.
5. [/] Handle invalid commands gracefully without crashing the program.

## 2:2 standard:

1. [/]  Rooms can contain multiple items or monsters.
2. [/]  The Testing class is used.
3. [/]  The player can pick up items through an implementation of the
        Player.PickUpItem() method.
4. [/]  The C# style guide is followed partially.
5. [/]  At least one room has a description and can contain one item or one
	monster. These functionalities are given by the Room.GetDescription() method.
6. [/]  Method calls from ‘Main’ to methods in other classes

## 2:1 standard:

1. [?]  Pull Requests and code reviews are noted
2. [/]  You have taken account of the reviews and merging your changes.
3. [/]  There is a complete implementation of your code with no issues.
4. [/]  Commenting is mostly through the code files.
5. [/]  There are at least one Game and Player objects.
6. [/]  There is evidence of testing.
7. [/]  Error handling is performed well but there are still issues.
8. [/]  There is clear evidence of object-oriented features such as classes, object 	instantiation, encapsulation and methods.

## First standard:

1. [?]  You have taken effective account of the reviews by merging your
	changes or suggesting alternative approaches.
2. [?]  The video demonstrates a critical reflection and that you learned from
	the assignment’s experience.
3. [.]  The implementation is complete with excellent error handling.
4. [/]  The C# style guide is shown to be adhered to. XML documenting
	comments are throughout the code.
5. [.]  The testing class uses ‘debug.assert’ to verify aspects of the code.
6. [/]  The implementation of classes, object instantiation, encapsulation
	and methods are complete and with no issues.

Question Guide:
Have the requirements been met?
	The requirements for the pass criteria have been met strongly, with a large amount of high mark requirements met.
Is the code formatted using the Style Guidelines correctly?
	The code is formatted very professionally and simply, allowing easy delegation of what code belongs to what class and reigon within the solution. Good structure and variables have been used.
Is the code easy to read?
	The code is easy to read and commented well to ensure further understanding of the logic behind the programming.
Are different errors handled correctly?
	Errors are mostly handled correctly, there were no issues when running the code and testing its functionality. However, there may be areas where more error handling could be implemented. 

